///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   30/May/2011  19:00:16 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\proj /
//                          ect\513\hit_wsn_2.0\Components\hal\target\CC2430E /
//                          B\hal_lcd.c                                       /
//    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          project\513\hit_wsn_2.0\Projects\zstack\Samples\R /
//                          outer_v2\CC2430DB\..\..\..\Tools\CC2430DB\f8wRout /
//                          er.cfg" (-DCPU32MHZ -DFORCE_MAC_NEAR              /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DRTR_NWK -DBLINK_LEDS "-DCONST=const __code"  /
//                          -DGENERIC=__generic) -f "C:\Documents and         /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\Tools\CC2430DB\f8wConfig.cfg" (-DSECURE=0   /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          /
//                          -DNWK_MAX_BINDING_ENTRIES=10                      /
//                          -DMAX_BINDING_CLUSTER_IDS=5                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           /
//                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440  /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\pro /
//                          ject\513\hit_wsn_2.0\Components\hal\target\CC2430 /
//                          EB\hal_lcd.c" -D CC2430EB -D REFLECTOR -D         /
//                          ZTOOL_P1 -D MT_TASK -D MT_ZDO_FUNC -D             /
//                          LCD_SUPPORTED=DEBUG -lC "C:\Documents and         /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\Rou /
//                          terEB\List\" -lA "C:\Documents and                /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\Rou /
//                          terEB\List\" --diag_suppress Pe001,Pa010          /
//                          --diag_remark pe550 -o "C:\Documents and          /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\Rou /
//                          terEB\Obj\" -e -z9 --no_code_motion --debug       /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          8 -I "C:\Documents and Settings\Administrator\×ÀÃ /
//                          æ\project\513\hit_wsn_2.0\Projects\zstack\Samples /
//                          \Router_v2\CC2430DB\" -I "C:\Documents and        /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          SOURCE\" -I "C:\Documents and                     /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\ZMAIN\TI2430DB\" -I "C:\Documents and       /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\" -I "C:\Documents and  /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I           /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\pro /
//                          ject\513\hit_wsn_2.0\Projects\zstack\Samples\Rout /
//                          er_v2\CC2430DB\..\..\..\..\..\COMPONENTS\HAL\TARG /
//                          ET\CC2430EB\" -I "C:\Documents and                /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I        /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\pro /
//                          ject\513\hit_wsn_2.0\Projects\zstack\Samples\Rout /
//                          er_v2\CC2430DB\..\..\..\..\..\COMPONENTS\OSAL\INC /
//                          LUDE\" -I "C:\Documents and                       /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\" -I              /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\pro /
//                          ject\513\hit_wsn_2.0\Projects\zstack\Samples\Rout /
//                          er_v2\CC2430DB\..\..\..\..\..\COMPONENTS\STACK\NW /
//                          K\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\" -I             /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\pro /
//                          ject\513\hit_wsn_2.0\Projects\zstack\Samples\Rout /
//                          er_v2\CC2430DB\..\..\..\..\..\COMPONENTS\STACK\SY /
//                          S\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\" -I             /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\pro /
//                          ject\513\hit_wsn_2.0\Projects\zstack\Samples\Rout /
//                          er_v2\CC2430DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W /
//                          \" -I "C:\Documents and                           /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\" -I "C:\Documents    /
//                          and Settings\Administrator\×ÀÃæ\project\513\hit_w /
//                          sn_2.0\Projects\zstack\Samples\Router_v2\CC2430DB /
//                          \..\..\..\..\..\COMPONENTS\SERVICES\SADDR\" -I    /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\pro /
//                          ject\513\hit_wsn_2.0\Projects\zstack\Samples\Rout /
//                          er_v2\CC2430DB\..\..\..\..\..\COMPONENTS\SERVICES /
//                          \SDATA\" -I "C:\Documents and                     /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\" -I           /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\pro /
//                          ject\513\hit_wsn_2.0\Projects\zstack\Samples\Rout /
//                          er_v2\CC2430DB\..\..\..\..\..\COMPONENTS\MAC\HIGH /
//                          _LEVEL\" -I "C:\Documents and                     /
//                          Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2 /
//                          .0\Projects\zstack\Samples\Router_v2\CC2430DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\SRF03\" -I   /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\pro /
//                          ject\513\hit_wsn_2.0\Projects\zstack\Samples\Rout /
//                          er_v2\CC2430DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ /
//                          LEVEL\SRF03\SINGLE_CHIP\" -I "C:\Program          /
//                          Files\IAR Systems\Embedded Workbench 4.0          /
//                          Evaluation version\8051\INC\" -I "C:\Program      /
//                          Files\IAR Systems\Embedded Workbench 4.0          /
//                          Evaluation version\8051\INC\CLIB\"                /
//    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\proj /
//                          ect\513\hit_wsn_2.0\Projects\zstack\Samples\Route /
//                          r_v2\CC2430DB\RouterEB\List\hal_lcd.s51           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_lcd

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??ComWrite?relay
        EXTERN ??DatWrite?relay
        EXTERN ??Delay_us?relay
        EXTERN ??HalLcdWriteString?relay
        EXTERN ??LCD_write_english_string?relay
        EXTERN ??OutData_164?relay
        EXTERN ??initLcd?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??ComWrite?relay,0203H
        FUNCTION ??DatWrite?relay,0203H
        FUNCTION ??Delay_us?relay,0203H
        PUBLIC ??HalLcdDisplayPercentBar?relay
        FUNCTION ??HalLcdDisplayPercentBar?relay,0203H
        PUBLIC ??HalLcdInit?relay
        FUNCTION ??HalLcdInit?relay,0203H
        PUBLIC ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,0203H
        PUBLIC ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,0203H
        PUBLIC ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,0203H
        PUBLIC ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,0203H
        PUBLIC ??HalLcdWriteValue?relay
        FUNCTION ??HalLcdWriteValue?relay,0203H
        FUNCTION ??LCD_write_english_string?relay,0203H
        FUNCTION ??OutData_164?relay,0203H
        FUNCTION ??initLcd?relay,0203H
        FUNCTION ComWrite,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION DatWrite,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION Delay_us,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC HalLcdDisplayPercentBar
        FUNCTION HalLcdDisplayPercentBar,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC HalLcdInit
        FUNCTION HalLcdInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcdWriteString
        FUNCTION HalLcdWriteString,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 44, STACK
        PUBLIC HalLcdWriteValue
        FUNCTION HalLcdWriteValue,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 41, STACK
        FUNCTION LCD_write_english_string,021203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        FUNCTION OutData_164,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK _A_P1
        PUBLIC font8x16
        FUNCTION initLcd,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_strlen         SYMBOL "osal_strlen"
osal_memcpy         SYMBOL "osal_memcpy"
debug_str           SYMBOL "debug_str"
osal_mem_free       SYMBOL "osal_mem_free"
_ltoa               SYMBOL "_ltoa"
??_ltoa?relay       SYMBOL "?relay", _ltoa
??debug_str?relay   SYMBOL "?relay", debug_str
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_strlen?relay SYMBOL "?relay", osal_strlen
HalLcdDisplayPercentBar SYMBOL "HalLcdDisplayPercentBar"
??HalLcdDisplayPercentBar?relay SYMBOL "?relay", HalLcdDisplayPercentBar
HalLcdInit          SYMBOL "HalLcdInit"
??HalLcdInit?relay  SYMBOL "?relay", HalLcdInit
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
HalLcdWriteValue    SYMBOL "HalLcdWriteValue"
??HalLcdWriteValue?relay SYMBOL "?relay", HalLcdWriteValue

        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN debug_str
        FUNCTION debug_str,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _ltoa
        FUNCTION _ltoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??_ltoa?relay
        FUNCTION ??_ltoa?relay,00H
        EXTERN ??debug_str?relay
        FUNCTION ??debug_str?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H

// C:\Documents and Settings\Administrator\×ÀÃæ\project\513\hit_wsn_2.0\Components\hal\target\CC2430EB\hal_lcd.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_lcd.c
//    3   Revised:        $Date: 2010-2-25 17:25 $
//    4   Revision:       $Revision: 0001 $
//    5 
//    6   Description:    This file contains the interface to the HAL LCD Service.
//    7                   WCG160100   UC1608
//    8 
//    9   Î÷°²»ª·²¿Æ¼¼ÓÐÏÞ¹«Ë¾
//   10   www.zigbeehf.com
//   11   www.zigbeehf.com.cn
//   12 
//   13 **************************************************************************************************/
//   14 
//   15 /**************************************************************************************************
//   16  *                                           INCLUDES
//   17  **************************************************************************************************/
//   18 #include "hal_types.h"
//   19 #include "hal_lcd.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//   20 #include "OSAL.h"
//   21 #include "OnBoard.h"
//   22 
//   23 #ifdef ZTOOL_PORT
//   24   #include "DebugTrace.h"
//   25 #endif
//   26 #include "intrinsics.h"
//   27 
//   28 #define LCD_MAX_BUF 25
//   29 //hal_lcd.h ÖÐÔ¤¶¨ÒåÒº¾§ÐÍºÅ
//   30 //LCD160100
//   31 
//   32 #ifdef LCD160100
//   33 //***************************************************************************//
//   34 //Òº¾§Îª160X100 UC1608¿ØÖÆÆ÷
//   35 //***************************************************************************//
//   36 
//   37 // LCD port/bit definitions
//   38 #define LCD_CD                 P1_4
//   39 #define LCD_WR0                P1_5
//   40 #define LCD_SCLK               P1_7
//   41 #define LCD_SDIN               P1_6
//   42 
//   43 //english_8x16_pixel
//   44 // 8 x 16 font
//   45 // index = ASCII - 32
//   46 // ------------------  ASCII×ÖÄ£µÄÊý¾Ý±í ------------------------ //
//   47 // Âë±í´Ó0x20~0x7e                                                //
//   48 // ×Ö¿â:  ºáÏòÈ¡Ä£×ó¸ßÎ»     //
//   49 // -------------------------------------------------------------- //

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//   50 __code const unsigned char font8x16[][16] =              // ASCII
font8x16:
        DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 60, 60
        DB 24, 24, 24, 0, 24, 24, 0, 0, 0, 0, 0, 102, 102, 102, 36, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 108, 254, 108, 108, 108, 254, 108
        DB 108, 0, 0, 0, 0, 24, 24, 124, 198, 194, 192, 124, 6, 134, 198, 124
        DB 24, 24, 0, 0, 0, 0, 0, 0, 0, 194, 198, 12, 24, 48, 96, 198, 134, 0
        DB 0, 0, 0, 0, 0, 56, 108, 108, 56, 118, 220, 204, 204, 204, 118, 0, 0
        DB 0, 0, 0, 48, 48, 48, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12
        DB 24, 48, 48, 48, 48, 48, 48, 24, 12, 0, 0, 0, 0, 0, 0, 48, 24, 12, 12
        DB 12, 12, 12, 12, 24, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 60, 255, 60
        DB 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 126, 24, 24, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 24, 48, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 12, 24, 48, 96, 192, 128, 0
        DB 0, 0, 0, 0, 0, 124, 198, 198, 206, 214, 214, 230, 198, 198, 124, 0
        DB 0, 0, 0, 0, 0, 24, 56, 120, 24, 24, 24, 24, 24, 24, 126, 0, 0, 0, 0
        DB 0, 0, 124, 198, 6, 12, 24, 48, 96, 192, 198, 254, 0, 0, 0, 0, 0, 0
        DB 124, 198, 6, 6, 60, 6, 6, 6, 198, 124, 0, 0, 0, 0, 0, 0, 12, 28, 60
        DB 108, 204, 254, 12, 12, 12, 30, 0, 0, 0, 0, 0, 0, 254, 192, 192, 192
        DB 252, 14, 6, 6, 198, 124, 0, 0, 0, 0, 0, 0, 56, 96, 192, 192, 252
        DB 198, 198, 198, 198, 124, 0, 0, 0, 0, 0, 0, 254, 198, 6, 6, 12, 24
        DB 48, 48, 48, 48, 0, 0, 0, 0, 0, 0, 124, 198, 198, 198, 124, 198, 198
        DB 198, 198, 124, 0, 0, 0, 0, 0, 0, 124, 198, 198, 198, 126, 6, 6, 6
        DB 12, 120, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 24, 24, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 24, 24, 48, 0, 0, 0, 0, 0, 0, 0, 6
        DB 12, 24, 48, 96, 48, 24, 12, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0
        DB 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 48, 24, 12, 6, 12, 24, 48, 96
        DB 0, 0, 0, 0, 0, 0, 124, 198, 198, 12, 24, 24, 24, 0, 24, 24, 0, 0, 0
        DB 0, 0, 0, 0, 124, 198, 198, 222, 222, 222, 220, 192, 124, 0, 0, 0, 0
        DB 0, 0, 16, 56, 108, 198, 198, 254, 198, 198, 198, 198, 0, 0, 0, 0, 0
        DB 0, 252, 102, 102, 102, 124, 102, 102, 102, 102, 252, 0, 0, 0, 0, 0
        DB 0, 60, 102, 194, 192, 192, 192, 192, 194, 102, 60, 0, 0, 0, 0, 0, 0
        DB 248, 108, 102, 102, 102, 102, 102, 102, 108, 248, 0, 0, 0, 0, 0, 0
        DB 254, 102, 98, 104, 120, 104, 96, 98, 102, 254, 0, 0, 0, 0, 0, 0, 254
        DB 102, 98, 104, 120, 104, 96, 96, 96, 240, 0, 0, 0, 0, 0, 0, 60, 102
        DB 194, 192, 192, 222, 198, 198, 102, 58, 0, 0, 0, 0, 0, 0, 198, 198
        DB 198, 198, 254, 198, 198, 198, 198, 198, 0, 0, 0, 0, 0, 0, 60, 24, 24
        DB 24, 24, 24, 24, 24, 24, 60, 0, 0, 0, 0, 0, 0, 30, 12, 12, 12, 12, 12
        DB 204, 204, 204, 120, 0, 0, 0, 0, 0, 0, 230, 102, 108, 108, 120, 120
        DB 108, 102, 102, 230, 0, 0, 0, 0, 0, 0, 240, 96, 96, 96, 96, 96, 96
        DB 98, 102, 254, 0, 0, 0, 0, 0, 0, 198, 238, 254, 254, 214, 198, 198
        DB 198, 198, 198, 0, 0, 0, 0, 0, 0, 198, 230, 246, 254, 222, 206, 198
        DB 198, 198, 198, 0, 0, 0, 0, 0, 0, 56, 108, 198, 198, 198, 198, 198
        DB 198, 108, 56, 0, 0, 0, 0, 0, 0, 252, 102, 102, 102, 124, 96, 96, 96
        DB 96, 240, 0, 0, 0, 0, 0, 0, 124, 198, 198, 198, 198, 198, 198, 214
        DB 222, 124, 12, 14, 0, 0, 0, 0, 252, 102, 102, 102, 124, 108, 102, 102
        DB 102, 230, 0, 0, 0, 0, 0, 0, 124, 198, 198, 96, 56, 12, 6, 198, 198
        DB 124, 0, 0, 0, 0, 0, 0, 126, 126, 90, 24, 24, 24, 24, 24, 24, 60, 0
        DB 0, 0, 0, 0, 0, 198, 198, 198, 198, 198, 198, 198, 198, 198, 124, 0
        DB 0, 0, 0, 0, 0, 198, 198, 198, 198, 198, 198, 198, 108, 56, 16, 0, 0
        DB 0, 0, 0, 0, 198, 198, 198, 198, 198, 214, 214, 254, 108, 108, 0, 0
        DB 0, 0, 0, 0, 198, 198, 108, 108, 56, 56, 108, 108, 198, 198, 0, 0, 0
        DB 0, 0, 0, 102, 102, 102, 102, 60, 24, 24, 24, 24, 60, 0, 0, 0, 0, 0
        DB 0, 254, 198, 134, 12, 24, 48, 96, 194, 198, 254, 0, 0, 0, 0, 0, 0
        DB 60, 48, 48, 48, 48, 48, 48, 48, 48, 60, 0, 0, 0, 0, 0, 0, 0, 128
        DB 192, 224, 112, 56, 28, 14, 6, 2, 0, 0, 0, 0, 0, 0, 60, 12, 12, 12
        DB 12, 12, 12, 12, 12, 60, 0, 0, 0, 0, 16, 56, 108, 198, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0
        DB 0, 48, 48, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DB 120, 12, 124, 204, 204, 204, 118, 0, 0, 0, 0, 0, 0, 224, 96, 96, 120
        DB 108, 102, 102, 102, 102, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 198
        DB 192, 192, 192, 198, 124, 0, 0, 0, 0, 0, 0, 28, 12, 12, 60, 108, 204
        DB 204, 204, 204, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 198, 254, 192
        DB 192, 198, 124, 0, 0, 0, 0, 0, 0, 56, 108, 100, 96, 240, 96, 96, 96
        DB 96, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 204, 204, 204, 204, 204
        DB 124, 12, 204, 120, 0, 0, 0, 224, 96, 96, 108, 118, 102, 102, 102
        DB 102, 230, 0, 0, 0, 0, 0, 0, 24, 24, 0, 56, 24, 24, 24, 24, 24, 60, 0
        DB 0, 0, 0, 0, 0, 6, 6, 0, 14, 6, 6, 6, 6, 6, 6, 102, 102, 60, 0, 0, 0
        DB 224, 96, 96, 102, 108, 120, 120, 108, 102, 230, 0, 0, 0, 0, 0, 0, 56
        DB 24, 24, 24, 24, 24, 24, 24, 24, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236
        DB 254, 214, 214, 214, 214, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 102
        DB 102, 102, 102, 102, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 198, 198
        DB 198, 198, 198, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 102, 102, 102
        DB 102, 102, 124, 96, 96, 240, 0, 0, 0, 0, 0, 0, 118, 204, 204, 204
        DB 204, 204, 124, 12, 12, 30, 0, 0, 0, 0, 0, 0, 220, 118, 98, 96, 96
        DB 96, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 198, 96, 56, 12, 198, 124
        DB 0, 0, 0, 0, 0, 0, 16, 48, 48, 252, 48, 48, 48, 48, 54, 28, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 204, 204, 204, 204, 204, 204, 118, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 102, 102, 102, 102, 102, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 198, 198, 198, 214, 214, 254, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198
        DB 108, 56, 56, 56, 108, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 198, 198
        DB 198, 198, 198, 126, 6, 12, 248, 0, 0, 0, 0, 0, 0, 254, 204, 24, 48
        DB 96, 198, 254, 0, 0, 0, 0, 0, 0, 36, 36, 36, 36, 36, 36, 36, 36, 36
        DB 36, 36, 0, 0, 0, 0, 0, 0, 0, 0, 32, 64, 255, 64, 32, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 4, 2, 255, 2, 4, 0, 0, 0, 0, 0, 0, 0, 16, 56, 84
        DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 16, 16, 16, 16, 16
        DB 16, 16, 16, 16, 16, 16, 84, 56, 16, 0, 126, 126, 24, 24, 24, 24, 24
        DB 24, 24, 24, 24, 24, 24, 24, 24, 30, 30, 24, 24, 24, 24, 24, 24, 24
        DB 24, 24, 24, 24, 24, 24, 126, 126
//   51 {
//   52 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // - -
//   53 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   54 
//   55 	0x00,0x00,0x18,0x3C,0x3C,0x3C,0x18,0x18,  // -!-
//   56 	0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,
//   57 
//   58 	0x00,0x66,0x66,0x66,0x24,0x00,0x00,0x00,  // -"-
//   59 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   60 
//   61 	0x00,0x00,0x00,0x6C,0x6C,0xFE,0x6C,0x6C,  // -#-
//   62 	0x6C,0xFE,0x6C,0x6C,0x00,0x00,0x00,0x00,
//   63 
//   64 	0x18,0x18,0x7C,0xC6,0xC2,0xC0,0x7C,0x06,  // -$-
//   65 	0x86,0xC6,0x7C,0x18,0x18,0x00,0x00,0x00,
//   66 
//   67 	0x00,0x00,0x00,0x00,0xC2,0xC6,0x0C,0x18,  // -%-
//   68 	0x30,0x60,0xC6,0x86,0x00,0x00,0x00,0x00,
//   69 
//   70 	0x00,0x00,0x38,0x6C,0x6C,0x38,0x76,0xDC,  // -&-
//   71 	0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
//   72 
//   73 	0x00,0x30,0x30,0x30,0x60,0x00,0x00,0x00,  // -'-
//   74 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   75 
//   76 	0x00,0x00,0x0C,0x18,0x30,0x30,0x30,0x30,  // -(-
//   77 	0x30,0x30,0x18,0x0C,0x00,0x00,0x00,0x00,
//   78 
//   79 	0x00,0x00,0x30,0x18,0x0C,0x0C,0x0C,0x0C,  // -)-
//   80 	0x0C,0x0C,0x18,0x30,0x00,0x00,0x00,0x00,
//   81 
//   82 	0x00,0x00,0x00,0x00,0x00,0x66,0x3C,0xFF,  // -*-
//   83 	0x3C,0x66,0x00,0x00,0x00,0x00,0x00,0x00,
//   84 
//   85 	0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x7E,  // -+-
//   86 	0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
//   87 
//   88 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -,-
//   89 	0x00,0x18,0x18,0x18,0x30,0x00,0x00,0x00,
//   90 
//   91 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,  // ---
//   92 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   93 
//   94 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -.-
//   95 	0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,
//   96 
//   97 	0x00,0x00,0x00,0x00,0x02,0x06,0x0C,0x18,  // -/-
//   98 	0x30,0x60,0xC0,0x80,0x00,0x00,0x00,0x00,
//   99 
//  100 	0x00,0x00,0x7C,0xC6,0xC6,0xCE,0xD6,0xD6,  // -0-
//  101 	0xE6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  102 
//  103 	0x00,0x00,0x18,0x38,0x78,0x18,0x18,0x18,  // -1-
//  104 	0x18,0x18,0x18,0x7E,0x00,0x00,0x00,0x00,
//  105 
//  106 	0x00,0x00,0x7C,0xC6,0x06,0x0C,0x18,0x30,  // -2-
//  107 	0x60,0xC0,0xC6,0xFE,0x00,0x00,0x00,0x00,
//  108 
//  109 	0x00,0x00,0x7C,0xC6,0x06,0x06,0x3C,0x06,  // -3-
//  110 	0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  111 
//  112 	0x00,0x00,0x0C,0x1C,0x3C,0x6C,0xCC,0xFE,  // -4-
//  113 	0x0C,0x0C,0x0C,0x1E,0x00,0x00,0x00,0x00,
//  114 
//  115 	0x00,0x00,0xFE,0xC0,0xC0,0xC0,0xFC,0x0E,  // -5-
//  116 	0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  117 
//  118 	0x00,0x00,0x38,0x60,0xC0,0xC0,0xFC,0xC6,  // -6-
//  119 	0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  120 
//  121 	0x00,0x00,0xFE,0xC6,0x06,0x06,0x0C,0x18,  // -7-
//  122 	0x30,0x30,0x30,0x30,0x00,0x00,0x00,0x00,
//  123 
//  124 	0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C,0xC6,  // -8-
//  125 	0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  126 
//  127 	0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7E,0x06,  // -9-
//  128 	0x06,0x06,0x0C,0x78,0x00,0x00,0x00,0x00,
//  129 
//  130 	0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,  // -:-
//  131 	0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,
//  132 
//  133 	0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,  // -;-
//  134 	0x00,0x18,0x18,0x30,0x00,0x00,0x00,0x00,
//  135 
//  136 	0x00,0x00,0x00,0x06,0x0C,0x18,0x30,0x60,  // -<-
//  137 	0x30,0x18,0x0C,0x06,0x00,0x00,0x00,0x00,
//  138 
//  139 	0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,  // -=-
//  140 	0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,
//  141 
//  142 	0x00,0x00,0x00,0x60,0x30,0x18,0x0C,0x06,  // ->-
//  143 	0x0C,0x18,0x30,0x60,0x00,0x00,0x00,0x00,
//  144 
//  145 	0x00,0x00,0x7C,0xC6,0xC6,0x0C,0x18,0x18,  // -?-
//  146 	0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,
//  147 
//  148 	0x00,0x00,0x00,0x7C,0xC6,0xC6,0xDE,0xDE,  // -@-
//  149 	0xDE,0xDC,0xC0,0x7C,0x00,0x00,0x00,0x00,
//  150 
//  151 	0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,  // -A-
//  152 	0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
//  153 
//  154 	0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x66,  // -B-
//  155 	0x66,0x66,0x66,0xFC,0x00,0x00,0x00,0x00,
//  156 
//  157 	0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xC0,  // -C-
//  158 	0xC0,0xC2,0x66,0x3C,0x00,0x00,0x00,0x00,
//  159 
//  160 	0x00,0x00,0xF8,0x6C,0x66,0x66,0x66,0x66,  // -D-
//  161 	0x66,0x66,0x6C,0xF8,0x00,0x00,0x00,0x00,
//  162 
//  163 	0x00,0x00,0xFE,0x66,0x62,0x68,0x78,0x68,  // -E-
//  164 	0x60,0x62,0x66,0xFE,0x00,0x00,0x00,0x00,
//  165 
//  166 	0x00,0x00,0xFE,0x66,0x62,0x68,0x78,0x68,  // -F-
//  167 	0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
//  168 
//  169 	0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xDE,  // -G-
//  170 	0xC6,0xC6,0x66,0x3A,0x00,0x00,0x00,0x00,
//  171 
//  172 	0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6,  // -H-
//  173 	0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
//  174 
//  175 	0x00,0x00,0x3C,0x18,0x18,0x18,0x18,0x18,  // -I-
//  176 	0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
//  177 
//  178 	0x00,0x00,0x1E,0x0C,0x0C,0x0C,0x0C,0x0C,  // -J-
//  179 	0xCC,0xCC,0xCC,0x78,0x00,0x00,0x00,0x00,
//  180 
//  181 	0x00,0x00,0xE6,0x66,0x6C,0x6C,0x78,0x78,  // -K-
//  182 	0x6C,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,
//  183 
//  184 	0x00,0x00,0xF0,0x60,0x60,0x60,0x60,0x60,  // -L-
//  185 	0x60,0x62,0x66,0xFE,0x00,0x00,0x00,0x00,
//  186 
//  187 	0x00,0x00,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,  // -M-
//  188 	0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
//  189 
//  190 	0x00,0x00,0xC6,0xE6,0xF6,0xFE,0xDE,0xCE,  // -N-
//  191 	0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
//  192 
//  193 	0x00,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xC6,  // -O-
//  194 	0xC6,0xC6,0x6C,0x38,0x00,0x00,0x00,0x00,
//  195 
//  196 	0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x60,  // -P-
//  197 	0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
//  198 
//  199 	0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,  // -Q-
//  200 	0xC6,0xD6,0xDE,0x7C,0x0C,0x0E,0x00,0x00,
//  201 
//  202 	0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x6C,  // -R-
//  203 	0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,
//  204 
//  205 	0x00,0x00,0x7C,0xC6,0xC6,0x60,0x38,0x0C,  // -S-
//  206 	0x06,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  207 
//  208 	0x00,0x00,0x7E,0x7E,0x5A,0x18,0x18,0x18,  // -T-
//  209 	0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
//  210 
//  211 	0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,  // -U-
//  212 	0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  213 
//  214 	0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,  // -V-
//  215 	0xC6,0x6C,0x38,0x10,0x00,0x00,0x00,0x00,
//  216 
//  217 	0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xD6,  // -W-
//  218 	0xD6,0xFE,0x6C,0x6C,0x00,0x00,0x00,0x00,
//  219 
//  220 	0x00,0x00,0xC6,0xC6,0x6C,0x6C,0x38,0x38,  // -X-
//  221 	0x6C,0x6C,0xC6,0xC6,0x00,0x00,0x00,0x00,
//  222 
//  223 	0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x18,  // -Y-
//  224 	0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
//  225 
//  226 	0x00,0x00,0xFE,0xC6,0x86,0x0C,0x18,0x30,  // -Z-
//  227 	0x60,0xC2,0xC6,0xFE,0x00,0x00,0x00,0x00,
//  228 
//  229 	0x00,0x00,0x3C,0x30,0x30,0x30,0x30,0x30,  // -[-
//  230 	0x30,0x30,0x30,0x3C,0x00,0x00,0x00,0x00,
//  231 
//  232 	0x00,0x00,0x00,0x80,0xC0,0xE0,0x70,0x38,  // -\-
//  233 	0x1C,0x0E,0x06,0x02,0x00,0x00,0x00,0x00,
//  234 
//  235 	0x00,0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,  // -]-
//  236 	0x0C,0x0C,0x0C,0x3C,0x00,0x00,0x00,0x00,
//  237 
//  238 	0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,  // -^-
//  239 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  240 
//  241 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -_-
//  242 	0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,
//  243 
//  244 	0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,  // -`-
//  245 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  246 
//  247 	0x00,0x00,0x00,0x00,0x00,0x78,0x0C,0x7C,  // -a-
//  248 	0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
//  249 
//  250 	0x00,0x00,0xE0,0x60,0x60,0x78,0x6C,0x66,  // -b-
//  251 	0x66,0x66,0x66,0xDC,0x00,0x00,0x00,0x00,
//  252 
//  253 	0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC0,  // -c-
//  254 	0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  255 
//  256 	0x00,0x00,0x1C,0x0C,0x0C,0x3C,0x6C,0xCC,  // -d-
//  257 	0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
//  258 
//  259 	0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xFE,  // -e-
//  260 	0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  261 
//  262 	0x00,0x00,0x38,0x6C,0x64,0x60,0xF0,0x60,  // -f-
//  263 	0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
//  264 
//  265 	0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,  // -g-
//  266 	0xCC,0xCC,0xCC,0x7C,0x0C,0xCC,0x78,0x00,
//  267 
//  268 	0x00,0x00,0xE0,0x60,0x60,0x6C,0x76,0x66,  // -h-
//  269 	0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,
//  270 
//  271 	0x00,0x00,0x18,0x18,0x00,0x38,0x18,0x18,  // -i-
//  272 	0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
//  273 
//  274 	0x00,0x00,0x06,0x06,0x00,0x0E,0x06,0x06,  // -j-
//  275 	0x06,0x06,0x06,0x06,0x66,0x66,0x3C,0x00,
//  276 
//  277 	0x00,0x00,0xE0,0x60,0x60,0x66,0x6C,0x78,  // -k-
//  278 	0x78,0x6C,0x66,0xE6,0x00,0x00,0x00,0x00,
//  279 
//  280 	0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18,  // -l-
//  281 	0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
//  282 
//  283 	0x00,0x00,0x00,0x00,0x00,0xEC,0xFE,0xD6,  // -m-
//  284 	0xD6,0xD6,0xD6,0xD6,0x00,0x00,0x00,0x00,
//  285 
//  286 	0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,  // -n-
//  287 	0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,
//  288 
//  289 	0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC6,  // -o-
//  290 	0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  291 
//  292 	0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,  // -p-
//  293 	0x66,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00,
//  294 
//  295 	0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,  // -q-
//  296 	0xCC,0xCC,0xCC,0x7C,0x0C,0x0C,0x1E,0x00,
//  297 
//  298 	0x00,0x00,0x00,0x00,0x00,0xDC,0x76,0x62,  // -r-
//  299 	0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
//  300 
//  301 	0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0x60,  // -s-
//  302 	0x38,0x0C,0xC6,0x7C,0x00,0x00,0x00,0x00,
//  303 
//  304 	0x00,0x00,0x10,0x30,0x30,0xFC,0x30,0x30,  // -t-
//  305 	0x30,0x30,0x36,0x1C,0x00,0x00,0x00,0x00,
//  306 
//  307 	0x00,0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,  // -u-
//  308 	0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
//  309 
//  310 	0x00,0x00,0x00,0x00,0x00,0x66,0x66,0x66,  // -v-
//  311 	0x66,0x66,0x3C,0x18,0x00,0x00,0x00,0x00,
//  312 
//  313 	0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,  // -w-
//  314 	0xD6,0xD6,0xFE,0x6C,0x00,0x00,0x00,0x00,
//  315 
//  316 	0x00,0x00,0x00,0x00,0x00,0xC6,0x6C,0x38,  // -x-
//  317 	0x38,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,
//  318 
//  319 	0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,  // -y-
//  320 	0xC6,0xC6,0xC6,0x7E,0x06,0x0C,0xF8,0x00,
//  321 
//  322 	0x00,0x00,0x00,0x00,0x00,0xFE,0xCC,0x18,  // -z-
//  323 	0x30,0x60,0xC6,0xFE,0x00,0x00,0x00,0x00,
//  324 	
//  325 	0x00,0x00,0x24,0x24,0x24,0x24,0x24,0x24,  // -||-    91
//  326 	0x24,0x24,0x24,0x24,0x24,0x00,0x00,0x00,
//  327 
//  328 	0x00,0x00,0x00,0x00,0x00,0x20,0x40,0xFF,  // -<--    92
//  329 	0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,
//  330 
//  331 	0x00,0x00,0x00,0x00,0x00,0x04,0x02,0xFF,  // ->-     93
//  332 	0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
//  333 
//  334 	0x00,0x10,0x38,0x54,0x10,0x10,0x10,0x10,  // -up-    94
//  335 	0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,
//  336 
//  337 	0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,  // -down-  95
//  338 	0x10,0x10,0x10,0x10,0x54,0x38,0x10,0x00,
//  339 	
//  340 	0x7E,0x7E,0x18,0x18,0x18,0x18,0x18,0x18,  // -ADC SeriesÉÏÓÃµÄÉÏ»®Ïß-
//  341 	0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1E,
//  342 
//  343 	0x1E,0x18,0x18,0x18,0x18,0x18,0x18,0x18,  // -ADC SeriesÉÏÓÃµÄÏÂ»®Ïß-
//  344 	0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x7E,
//  345 };
//  346 
//  347 #else
//  348 
//  349 //***************************************************************************//
//  350 //Òº¾§Îª84x48 3310
//  351 //***************************************************************************//
//  352 
//  353 // LCD port/bit definitions
//  354 #define LCD_DC                 P1_7
//  355 #define LCD_SDA                P1_6
//  356 #define LCD_SCL                P1_5
//  357 #define LCD_CE                 P1_4
//  358 
//  359 /**************************************/
//  360 //english_6x8_pixel
//  361 // 6 x 8 font
//  362 // 1 pixel space at left and bottom
//  363 // index = ASCII - 32
//  364 __code const unsigned char font6x8[][6] =
//  365 {
//  366   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp  0
//  367   { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !   1
//  368   { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "   2
//  369   { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #   3
//  370   { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $   4
//  371   { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %   5
//  372   { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &   6
//  373   { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '   7
//  374   { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (   8
//  375   { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )   9
//  376   { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *   10
//  377   { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +   11
//  378   { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,   12
//  379   { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -   13
//  380   { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .   14
//  381   { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /   15
//  382   { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0   16
//  383   { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1   17
//  384   { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2   18
//  385   { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3   19
//  386   { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4   20
//  387   { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5   21
//  388   { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6   22
//  389   { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7   23
//  390   { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8   24
//  391   { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9   25
//  392   { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :   26
//  393   { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;   27
//  394   { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <   28
//  395   { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =   29
//  396   { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >   30
//  397   { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?   31
//  398   { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @   32
//  399   { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A   33
//  400   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B   34
//  401   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C   35
//  402   { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D   36
//  403   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E   37
//  404   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F   38
//  405   { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G   39
//  406   { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H   40
//  407   { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I   41
//  408   { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J   42
//  409   { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K   43
//  410   { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L   44
//  411   { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M   45
//  412   { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N   46
//  413   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O   47
//  414   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P   48
//  415   { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q   49
//  416   { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R   50
//  417   { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S   51
//  418   { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T   52
//  419   { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U   53
//  420   { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V   54
//  421   { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W   55
//  422   { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X   56
//  423   { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y   57
//  424   { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z   58
//  425   { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [   59
//  426   { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55  60
//  427   { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]   61
//  428   { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^   62
//  429   { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _   63
//  430   { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '   64
//  431   { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a   65
//  432   { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b   66
//  433   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c   67
//  434   { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d   68
//  435   { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e   69
//  436   { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f   70
//  437   { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g   71
//  438   { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h   72
//  439   { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i   73
//  440   { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j   74
//  441   { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k   75
//  442   { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l   76
//  443   { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m   77
//  444   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n   78
//  445   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o   79
//  446   { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p   80
//  447   { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q   81
//  448   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r   82
//  449   { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s   83
//  450   { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t   84
//  451   { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u   85
//  452   { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v   86
//  453   { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w   87
//  454   { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x   88
//  455   { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y   89
//  456   { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z   90
//  457   { 0x00, 0x00, 0xff, 0xff, 0x00, 0x00 },   // ||  91
//  458   { 0x08, 0x1c, 0x2a, 0x08, 0x08, 0x08 },   // <-  92
//  459   { 0x08, 0x08, 0x08, 0x2a, 0x1c, 0x08 },   // ->  94
//  460   { 0x04, 0x02, 0xff, 0x02, 0x04, 0x00 },   // up  94
//  461   { 0x00, 0x20, 0x40, 0xff, 0x40, 0x20 }    // down  95
//  462 };
//  463 
//  464 #endif
//  465 /**************************************************************************************************
//  466  *                                       GLOBAL VARIABLES
//  467  **************************************************************************************************/
//  468 #ifdef LCD_HW

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  469 static uint8 *Lcd_Line1;
Lcd_Line1:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  470 #endif
//  471 /**************************************************************************************************
//  472  *                                       FUNCTIONS - API
//  473  **************************************************************************************************/
//  474 #if (defined LCD_HW) && (HAL_LCD == TRUE)
//  475 
//  476 #ifdef LCD160100
//  477 //***************************************************************************//
//  478 //Òº¾§Îª160X100 UC1608¿ØÖÆÆ÷
//  479 //***************************************************************************//
//  480 
//  481 /************ ÑÓÊ±º¯Êý ******************************/
//  482 
//  483 //ÑÓÊ±n us
//  484 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  485 static void Delay_us(unsigned int n)
Delay_us:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Delay_us
//  486 {
        ; Saved register size: 0
        ; Auto size: 0
//  487   unsigned int i;
//  488   unsigned int j;
//  489   for(i = 0; i < n; i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??Delay_us_0
//  490   for(j = 1; j<0x05; j++)
??Delay_us_1:
        MOV     R4,#0x4
??Delay_us_2:
        DEC     R4
        MOV     A,R4
        JNZ     ??Delay_us_2
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Delay_us_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??Delay_us_1
//  491       ;
//  492 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  493 
//  494 //164Êä³öÊý¾Ý
//  495 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  496 static void OutData_164(unsigned char Indata)
OutData_164:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function OutData_164
//  497 {
        ; Saved register size: 0
        ; Auto size: 0
//  498   unsigned char i;
//  499   for(i=0;i<8;i++)
        MOV     R2,#0x8
//  500   {
//  501     if(Indata&0x80)
??OutData_164_0:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JNC     ??OutData_164_1
//  502     {
//  503       LCD_SDIN=1;
        SETB    0x90.6
        SJMP    ??OutData_164_2
//  504     }
//  505     else
//  506     {
//  507       LCD_SDIN=0;
??OutData_164_1:
        CLR     0x90.6
//  508     }
//  509     LCD_SCLK=0;
??OutData_164_2:
        CLR     0x90.7
//  510     __no_operation();
        NOP
//  511     __no_operation();
        NOP
//  512     LCD_SCLK=1;
        SETB    0x90.7
//  513     __no_operation();
        NOP
//  514     __no_operation();
        NOP
//  515     LCD_SCLK=0;
        CLR     0x90.7
//  516     Indata=Indata<<1;	
        CLR     C
        RLC     A
        MOV     R1,A
//  517   }
        DEC     R2
        MOV     A,R2
        JNZ     ??OutData_164_0
//  518 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE _A_P1
//  519 
//  520 //Ð´Êý¾Ý
//  521 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  522 static void DatWrite(unsigned char dat)
DatWrite:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function DatWrite
//  523 {	
        FUNCALL DatWrite, OutData_164
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DatWrite, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DatWrite, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  524   LCD_CD=1;
        SETB    0x90.4
        CFI EndBlock cfiBlock2
//  525   LCD_WR0=0;
        REQUIRE ?Subroutine17
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine17
//  526   OutData_164(dat);
//  527   Delay_us(1);
//  528   LCD_WR0=1;
//  529   Delay_us(1);
//  530 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine0 & 0xFFFF
??Subroutine17_0:
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
//  531 
//  532 //Ð´ÃüÁî
//  533 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  534 static void ComWrite(unsigned char com)
ComWrite:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ComWrite
//  535 {
        FUNCALL ComWrite, OutData_164
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ComWrite, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ComWrite, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  536   LCD_CD=0;
        CLR     0x90.4
//  537   LCD_WR0=0;
        SJMP    ?Subroutine17
        CFI EndBlock cfiBlock4
        REQUIRE _A_P1
//  538   OutData_164(com);
//  539   Delay_us(1);
//  540   LCD_WR0=1;
//  541   Delay_us(1);
//  542 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??Subroutine17_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??Subroutine17_0
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        CLR     0x90.5
        ; Setup parameters for call to function OutData_164
        ; Setup parameters for call to function OutData_164
        LCALL   ??OutData_164?relay
        ; Setup parameters for call to function Delay_us
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
        SETB    0x90.5
        ; Setup parameters for call to function Delay_us
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  543 
//  544 static void Disp(unsigned char dot1 , unsigned char dot2)
//  545 {
//  546   unsigned char cnt, cnt1;
//  547   for(cnt = 0; cnt < 13; cnt ++)
//  548   {
//  549     ComWrite(0xb0 + cnt);
//  550     ComWrite(0x10);
//  551     ComWrite(0x00);
//  552     for(cnt1=0; cnt1 < 80; cnt1 ++)
//  553     {
//  554       DatWrite(dot1);
//  555       DatWrite(dot2);
//  556     }
//  557 
//  558   }
//  559 }
//  560 
//  561 /*-----------------------------------------------------------------------
//  562 LCD_clear         : LCDÇåÆÁº¯Êý
//  563 
//  564 ±àÐ´ÈÕÆÚ          £º2004-8-10
//  565 ×îºóÐÞ¸ÄÈÕÆÚ      £º2004-8-10
//  566 -----------------------------------------------------------------------*/
//  567 static void LCD_clear(void)
//  568 {
//  569   Disp(0x00,0x00);
//  570 }
//  571 
//  572 /*-----------------------------------------------------------------------
//  573 LCD_init          : LCD³õÊ¼»¯
//  574 
//  575 ±àÐ´ÈÕÆÚ          £º2004-8-10
//  576 ×îºóÐÞ¸ÄÈÕÆÚ      £º2004-8-10
//  577 -----------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  578 static void initLcd(void)
initLcd:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function initLcd
//  579 {
        FUNCALL initLcd, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, DatWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initLcd, DatWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  580   unsigned char Ratio = 0x2d;//Set Power Controlc=<26;d:26-43
//  581   unsigned char Refer = 0x6d;//Set reference voltage register
//  582   // CC2430 ÖÐ£¬I/O ¿Ú×öÆÕÍ¨ I/O Ê¹ÓÃÊ±ºÍÃ¿¸ö I/O ¶Ë¿ÚÏà¹ØµÄ¼Ä´æÆ÷ÓÐ 3 ¸ö£¬·Ö±ðÊÇ //PxSEL
//  583   //¹¦ÄÜÑ¡Ôñ¼Ä´æÆ÷£¬PxDIR ·½Ïò¼Ä´æÆ÷£¬PxINP ÊäÈëÄ£Ê½¼Ä´æÆ÷£¬ÆäÖÐ x Îª 0£¬1£¬2 ¡£
//  584 
//  585   P1SEL &= 0x0F; //P1¸ß4Î» ÎªÆÕÍ¨ I/O ¿Ú
        ANL     0xf4,#0xf
        MOV     A,0xf4
//  586   P1DIR |= 0xF0; //P1¸ß4Î» ÉèÖÃÎªÊä³ö
        ORL     0xfe,#0xf0
        MOV     A,0xfe
//  587 
//  588   Delay_us(2000);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#-0x30
        MOV     R3,#0x7
        LCALL   ??Delay_us?relay
//  589   ComWrite(0xe2);      // Reset
        ; Setup parameters for call to function ComWrite
        MOV     R1,#-0x1e
        LCALL   ??ComWrite?relay
//  590   Delay_us(500);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_us?relay
//  591   ComWrite(0xae);      // Display Off
        ; Setup parameters for call to function ComWrite
        MOV     R1,#-0x52
        LCALL   ??ComWrite?relay
//  592   ComWrite(0x24);      // MUX ratio(duty)=1/128 & temperature compensation
        ; Setup parameters for call to function ComWrite
        MOV     R1,#0x24
        LCALL   ??ComWrite?relay
//  593   ComWrite(0xc4);      // Set LCD mapping control
        ; Setup parameters for call to function ComWrite
        MOV     R1,#-0x3c
        LCALL   ?Subroutine6 & 0xFFFF
//  594   ComWrite(0x2d);      // set internal charge pump---new
//  595   ComWrite(0xea);      // lcd bias 1/12//ea  e911.3  e810.7   eb12.7
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function ComWrite
        MOV     R1,#-0x16
        LCALL   ?Subroutine6 & 0xFFFF
//  596   ComWrite(Ratio);     // Set Power Control(capacitance of LCD and internal Vlcd)
//  597   ComWrite(0x81);      // Set gain and potentiometer (Double Byte Command)
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function ComWrite
        MOV     R1,#-0x7f
        LCALL   ??ComWrite?relay
//  598   ComWrite(Refer);     // Set reference voltage register
        ; Setup parameters for call to function ComWrite
        MOV     R1,#0x6d
        LCALL   ??ComWrite?relay
//  599 //  ComWrite(0x90);      // Set fixed lines
//  600   ComWrite(0x8c);      // Set RAM Address Control
        ; Setup parameters for call to function ComWrite
        MOV     R1,#-0x74
        LCALL   ??ComWrite?relay
//  601   ComWrite(0xaf);      // Display On
        ; Setup parameters for call to function ComWrite
        MOV     R1,#-0x51
        LCALL   ??ComWrite?relay
//  602   ComWrite(0x40);      // Set Display Start Line
        ; Setup parameters for call to function ComWrite
        MOV     R1,#0x40
        LCALL   ??ComWrite?relay
//  603   LCD_clear();	       // Clear LCD
        MOV     R7,#0x0
??initLcd_0:
        ; Setup parameters for call to function ComWrite
        MOV     A,#-0x50
        ADD     A,R7
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R6,#0x50
??initLcd_1:
        ; Setup parameters for call to function DatWrite
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        DEC     R6
        MOV     A,R6
        JNZ     ??initLcd_1
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0xd
        JC      ??initLcd_0
        CFI EndBlock cfiBlock8
//  604 }
        REQUIRE ?Subroutine18
        REQUIRE P1SEL
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        LCALL   ??ComWrite?relay
        ; Setup parameters for call to function ComWrite
        ; Setup parameters for call to function ComWrite
        MOV     R1,#0x2d
        LCALL   ??ComWrite?relay
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  605 
//  606 
//  607 //16X16ºáÏò×ÖÄ£×ª×ÝÏò×ÖÄ£
//  608 
//  609 static void Adj_Data_16X16(unsigned char  *Src_Dat,unsigned char *Dst_Dat)
//  610 {
//  611   unsigned char i,j;
//  612   for(i=0;i<32;i++)
//  613   {
//  614     *(Dst_Dat+i)=0;
//  615   }
//  616   for(j=0;j<8;j++)
//  617   {
//  618     for(i=0;i<8;i++)
//  619     {
//  620       *(Dst_Dat+j*2)      |=  (((*(Src_Dat+i*2))>>(7-j))&0x01)<<i;
//  621       *(Dst_Dat+j*2+1)    |=  (((*(Src_Dat+i*2+16))>>(7-j))&0x01)<<i;
//  622       *(Dst_Dat+j*2+16)   |=  (((*(Src_Dat+i*2+1))>>(7-j))&0x01)<<i;
//  623       *(Dst_Dat+j*2+1+16) |=  (((*(Src_Dat+i*2+16+1))>>(7-j))&0x01)<<i;
//  624     }
//  625   }
//  626 }
//  627 
//  628 //8X16ºáÏò×ÖÄ£×ª×ÝÏò×ÖÄ£
//  629 
//  630 static void Adj_Data_8X16(unsigned char  *Src_Dat,unsigned char *Dst_Dat)
//  631 {
//  632   unsigned char i,j;
//  633   for(i=0;i<16;i++)
//  634   {
//  635     *(Dst_Dat+i)=0;
//  636   }
//  637   for(j=0;j<8;j++)
//  638   {
//  639     for(i=0;i<8;i++)
//  640     {
//  641       *(Dst_Dat+j*2)      |=  (((*(Src_Dat+i))>>(7-j))&0x01)<<i;
//  642       *(Dst_Dat+j*2+1)    |=  (((*(Src_Dat+i+8))>>(7-j))&0x01)<<i;
//  643     }
//  644   }
//  645 }
//  646 
//  647 //Çå³ýÐÐ
//  648 
//  649 static void LCD_clear_line(unsigned char line)
//  650 {
//  651   unsigned char cnt, cnt1;
//  652   for(cnt = line*2; cnt < line*2+2; cnt ++)
//  653   {
//  654     ComWrite(0xb0 + cnt);
//  655     ComWrite(0x10);
//  656     ComWrite(0x00);
//  657     for(cnt1=0; cnt1 < 80; cnt1 ++)
//  658     {
//  659       DatWrite(0);
//  660       DatWrite(0);
//  661     }
//  662   }
//  663 }
//  664 
//  665 /*-----------------------------------------------------------------------
//  666 LCD_write_english_String  : Ó¢ÎÄ×Ö·û´®ÏÔÊ¾º¯Êý
//  667 
//  668 ÊäÈë²ÎÊý£º*s      £ºÓ¢ÎÄ×Ö·û´®Ö¸Õë£»
//  669 X¡¢Y    : ÏÔÊ¾×Ö·û´®µÄÎ»ÖÃ,x 0-151 ,y 0-5
//  670 
//  671 ±àÐ´ÈÕÆÚ          £º2004-8-10
//  672 ×îºóÐÞ¸ÄÈÕÆÚ      £º2004-8-10 		
//  673 -----------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  674 static void LCD_write_english_string(unsigned char X,unsigned char Y,uint8 *s)
LCD_write_english_string:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function LCD_write_english_string
//  675 {
        FUNCALL LCD_write_english_string, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, DatWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, DatWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, DatWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, ComWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_write_english_string, DatWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 4,R1
        MOV     A,R2
        MOV     R7,A
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  676   unsigned char m, n;
//  677   unsigned char LSB_Data,MSB_Data;
//  678   unsigned char data_new[16];
//  679   unsigned char i,j;
//  680   LCD_clear_line(Y);
        CLR     C
        RLC     A
        MOV     R6,A
        SJMP    ??LCD_write_english_string_0
??LCD_write_english_string_1:
        ; Setup parameters for call to function ComWrite
        MOV     A,#-0x50
        ADD     A,R6
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     ?V0 + 0,#0x50
??LCD_write_english_string_2:
        ; Setup parameters for call to function DatWrite
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_15:
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JNZ     ??LCD_write_english_string_2
        INC     R6
??LCD_write_english_string_0:
        MOV     ?V0 + 0,R6
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#0x2
        ADD     A,R0
        INC     R0
        INC     R0
        CLR     A
        ADDC    A,R1
        MOV     R1,A
        MOV     A,?V0 + 0
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??LCD_write_english_string_1
//  681   n=0;
        MOV     R6,#0x0
//  682   while(*s)
??LCD_write_english_string_3:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??LCD_write_english_string_4 & 0xFFFF
//  683   {
//  684     //ºáÏß×ÖÄ£×ª»»Îª×ÝÏò×ÖÄ£
//  685     for(i=0;i<16;i++)
        MOV     R2,#0x0
//  686     {
//  687       data_new[i]=0;
??LCD_write_english_string_5:
        MOV     ?V0 + 0,R2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_18:
        CLR     A
        MOVX    @DPTR,A
//  688     }
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??LCD_write_english_string_5
//  689     for(j=0;j<8;j++)
        MOV     R3,#0x0
//  690     {
//  691       for(i=0;i<8;i++)
??LCD_write_english_string_6:
        MOV     R2,#0x0
??LCD_write_english_string_7:
        MOV     ?V0 + 0,R2
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ADD     A,#(font8x16 & 0xff)
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,#((font8x16 >> 8) & 0xff)
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     A,R3
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x7
        CLR     C
        SUBB    A,R3
        MOV     ?V0 + 2,A
        MOV     A,R4
        ADD     A,#0x0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?SS_SHR
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?S_SHL
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_29:
        MOVX    A,@DPTR
        ORL     A,?V0 + 0
        MOVX    @DPTR,A
//  692       {
//  693         data_new[j*2]   |= ((font8x16[*s-0x20][i]>>(7-j))&0x01)<<i;
//  694         data_new[j*2+1] |= ((font8x16[*s-0x20][i+8]>>(7-j))&0x01)<<i;
        MOV     A,R4
        ADD     A,#0x8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?SS_SHR
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?S_SHL
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_30:
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,?V0 + 0
        MOVX    @DPTR,A
//  695       }
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_write_english_string_7
//  696     }
        INC     R3
        MOV     A,R3
        CLR     C
        SUBB    A,#0x8
        JNC     $+5
        LJMP    ??LCD_write_english_string_6 & 0xFFFF
//  697 
//  698     //Òº¾§ÏÔÊ¾
//  699     ComWrite(0xb0+0+Y*2);
        ; Setup parameters for call to function ComWrite
        MOV     A,R7
        CLR     C
        RLC     A
        ADD     A,#-0x50
        MOV     R1,A
        LCALL   ??ComWrite?relay
//  700     for(m=0;m<8;m++)
        MOV     ?V0 + 0,#0x0
//  701     {
//  702       LSB_Data=(m+n*8+X)&0x0f;
//  703       MSB_Data=(((m+n*8+X)>>4)&0x0f)|0x10;
//  704       ComWrite(LSB_Data);
??LCD_write_english_string_8:
        ; Setup parameters for call to function ComWrite
        LCALL   ?Subroutine3 & 0xFFFF
//  705       ComWrite(MSB_Data);
??CrossCallReturnLabel_6:
        JB      0xE0 /* A   */.3,??LCD_write_english_string_9
        ANL     A,#0xf
        SJMP    ??LCD_write_english_string_10
??LCD_write_english_string_9:
        ORL     A,#0xf0
??LCD_write_english_string_10:
        LCALL   ?Subroutine4 & 0xFFFF
//  706       DatWrite(data_new[m*2]);
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?Subroutine5 & 0xFFFF
//  707     }
??CrossCallReturnLabel_10:
        JC      ??LCD_write_english_string_8
//  708     ComWrite(0xb0+1+Y*2);
        ; Setup parameters for call to function ComWrite
        MOV     A,R7
        CLR     C
        RLC     A
        ADD     A,#-0x4f
        MOV     R1,A
        LCALL   ??ComWrite?relay
//  709     for(m=0;m<8;m++)
        MOV     ?V0 + 0,#0x0
//  710     {
//  711       LSB_Data=(m+n*8+X)&0x0f;
//  712       MSB_Data=(((m+n*8+X)>>4)&0x0f)|0x10;
//  713       ComWrite(LSB_Data);
??LCD_write_english_string_11:
        ; Setup parameters for call to function ComWrite
        LCALL   ?Subroutine3 & 0xFFFF
//  714       ComWrite(MSB_Data);
??CrossCallReturnLabel_7:
        JB      0xE0 /* A   */.3,??LCD_write_english_string_12
        ANL     A,#0xf
        SJMP    ??LCD_write_english_string_13
??LCD_write_english_string_12:
        ORL     A,#0xf0
??LCD_write_english_string_13:
        LCALL   ?Subroutine4 & 0xFFFF
//  715       DatWrite(data_new[m*2+1]);
??CrossCallReturnLabel_9:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        INC     DPTR
        LCALL   ?Subroutine5 & 0xFFFF
//  716     }
??CrossCallReturnLabel_11:
        JC      ??LCD_write_english_string_11
//  717     s++;
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
//  718     n++;
        INC     R6
//  719     if(n>=HAL_LCD_MAX_CHARS)return;
        MOV     A,R6
        CLR     C
        SUBB    A,#0x14
        JNC     $+5
        LJMP    ??LCD_write_english_string_3 & 0xFFFF
??LCD_write_english_string_4:
        MOV     A,#0x12
        CFI EndBlock cfiBlock13
        REQUIRE ?Subroutine19
        ; // Fall through to label ?Subroutine19
//  720   }
//  721 
//  722 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     A,#0x1
        ANL     A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     A,R2
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#-0x2
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     A,?V0 + 2
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOV     R1,#0x0
        LCALL   ??DatWrite?relay
        ; Setup parameters for call to function DatWrite
        ; Setup parameters for call to function DatWrite
        MOV     R1,#0x0
        LCALL   ??DatWrite?relay
        RET
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??DatWrite?relay
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x8
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        ANL     A,#0xf
        ORL     A,#0x10
        MOV     R1,A
        LCALL   ??ComWrite?relay
        ; Setup parameters for call to function DatWrite
        ; Setup parameters for call to function DatWrite
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        ADD     A,?V0 + 0
        ADD     A,?V0 + 4
        ANL     A,#0xf
        MOV     R1,A
        LCALL   ??ComWrite?relay
        ; Setup parameters for call to function ComWrite
        ; Setup parameters for call to function ComWrite
        MOV     A,R6
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        ADD     A,?V0 + 0
        ADD     A,?V0 + 4
        SWAP    A
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOV     R1,A
        LCALL   ??ComWrite?relay
        ; Setup parameters for call to function ComWrite
        ; Setup parameters for call to function ComWrite
        MOV     R1,#0x10
        LCALL   ??ComWrite?relay
        ; Setup parameters for call to function ComWrite
        ; Setup parameters for call to function ComWrite
        MOV     R1,#0x0
        LCALL   ??ComWrite?relay
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41
//  723 
//  724 
//  725 /******************************************************************************
//  726 * See lcd.h for a description of this function.
//  727 ******************************************************************************/
//  728 static void lcdUpdateChar(unsigned char line, unsigned char position, char c)
//  729 {
//  730   unsigned char i,j;
//  731   unsigned char LSB_Data,MSB_Data;
//  732   unsigned char data_new[16];
//  733 
//  734   //ºáÏß×ÖÄ£×ª»»Îª×ÝÏò×ÖÄ£
//  735   for(i=0;i<16;i++)
//  736   {
//  737     data_new[i]=0;
//  738   }
//  739   for(j=0;j<8;j++)
//  740   {
//  741     for(i=0;i<8;i++)
//  742     {
//  743       data_new[j*2]    |= ((font8x16[c-0x20][i]>>(7-j))&0x01)<<i;
//  744       data_new[j*2+1]  |= ((font8x16[c-0x20][i+8]>>(7-j))&0x01)<<i;
//  745     }
//  746   }
//  747 
//  748   //Òº¾§ÏÔÊ¾
//  749   ComWrite(0xb0+0+line*2);
//  750   for(i=0;i<8;i++)
//  751   {
//  752     LSB_Data=(i+position*8)&0x0f;
//  753     MSB_Data=(((i+position*8)>>4)&0x0f)|0x10;
//  754     ComWrite(LSB_Data);
//  755     ComWrite(MSB_Data);
//  756     DatWrite(data_new[i*2]);
//  757   }
//  758   ComWrite(0xb0+1+line*2);
//  759   for(i=0;i<8;i++)
//  760   {
//  761     LSB_Data=(i+position*8)&0x0f;
//  762     MSB_Data=(((i+position*8)>>4)&0x0f)|0x10;
//  763     ComWrite(LSB_Data);
//  764     ComWrite(MSB_Data);
//  765     DatWrite(data_new[i*2+1]);
//  766   }
//  767 }
//  768 
//  769 /******************************************************************************
//  770 * See lcd.h for a description of this function.
//  771 ******************************************************************************/
//  772 static void lcdUpdateLine(uint8 line, uint8 *pLine)
//  773 {
//  774   LCD_write_english_string(0,line,pLine);
//  775 }
//  776 
//  777 /*
//  778 void disp_hanzi(unsigned char Xdata,unsigned char Ydata,unsigned char const *Disp_Data,unsigned char len)
//  779 {
//  780    uchar i, j,k;
//  781    uchar LSB_Data,MSB_Data;
//  782    uchar hanzi_new[10][32];
//  783    for(i=0;i<len;i++)
//  784    {
//  785      Adj_Data_16X16(Disp_Data+i*32,&hanzi_new[i][0]);
//  786    }
//  787 
//  788    for(j=0;j<len;j++)
//  789    {
//  790    	
//  791     ComWrite(0xb0+0+Ydata*2);
//  792     for(i=0;i<16;i++)
//  793     {
//  794     	LSB_Data=(i+j*16+Xdata)&0x0f;
//  795     	MSB_Data=(((i+j*16+Xdata)>>4)&0x0f)|0x10;
//  796       ComWrite(LSB_Data);
//  797       ComWrite(MSB_Data);
//  798       DatWrite(hanzi_new[j][i*2]);
//  799     }
//  800 
//  801     ComWrite(0xb0+1+Ydata*2);
//  802 
//  803     for(i=0;i<16;i++)
//  804     {
//  805     	LSB_Data=(i+j*16+Xdata)&0x0f;
//  806     	MSB_Data=(((i+j*16+Xdata)>>4)&0x0f)|0x10;
//  807       ComWrite(LSB_Data);
//  808       ComWrite(MSB_Data);
//  809       DatWrite(hanzi_new[j][i*2+1]);
//  810     }
//  811   }
//  812 }
//  813 
//  814 */
//  815 
//  816 #else
//  817 
//  818 //***************************************************************************//
//  819 //Òº¾§Îª84X48 3310 
//  820 //***************************************************************************//
//  821 
//  822 /************ ÑÓÊ±º¯Êý ******************************/
//  823 static void Delay_nms(unsigned int Time) // ÑÓÊ±µ¥Î»:ms
//  824 {
//  825   unsigned int i;
//  826   unsigned char j;
//  827 
//  828   for(i=0;i<Time;i++)
//  829   {
//  830     for(j=0;j<123;j++){}
//  831   }
//  832 }
//  833 
//  834 /******** ·¢ËÍÒ»¸ö×Ö½ÚµÄÊý¾Ýµ½Òº¾§¿ØÖÆÆ÷*************************/
//  835 static void SendByte(unsigned char Data)
//  836 {
//  837   unsigned char i;
//  838   LCD_CE=0;
//  839   for(i=0;i<8;i++)
//  840   {
//  841     LCD_SCL = 0;
//  842     if(Data & 0x80)
//  843     {
//  844       LCD_SDA = 1;
//  845     }
//  846     else LCD_SDA = 0;
//  847     LCD_SCL = 1;
//  848     Data<<=1;
//  849   }
//  850   LCD_CE=1;
//  851 }
//  852 
//  853 /*-----------------------------------------------------------------------
//  854 LCD_write_byte    : Ê¹ÓÃSPI½Ó¿ÚÐ´Êý¾Ýµ½LCD
//  855 
//  856 ÊäÈë²ÎÊý£ºdata    £ºÐ´ÈëµÄÊý¾Ý£»
//  857 command £ºÐ´Êý¾Ý/ÃüÁîÑ¡Ôñ£»
//  858 
//  859 ±àÐ´ÈÕÆÚ          £º2004-8-10
//  860 ×îºóÐÞ¸ÄÈÕÆÚ      £º2004-8-13
//  861 -----------------------------------------------------------------------*/
//  862 static void LCD_write_byte(unsigned char data, unsigned char command)
//  863 {
//  864   LCD_CE = 1 ;		 // Ê¹ÄÜLCD
//  865 
//  866   if (command == 0)
//  867     LCD_DC = 0;	        // ´«ËÍÃüÁî
//  868   else
//  869     LCD_DC = 1;		// ´«ËÍÊý¾Ý
//  870   SendByte(data);
//  871   LCD_CE = 0;	        // ¹Ø±ÕLCD
//  872   LCD_DC = 1;	
//  873 }
//  874 
//  875 /*-----------------------------------------------------------------------
//  876 LCD_clear         : LCDÇåÆÁº¯Êý
//  877 
//  878 ±àÐ´ÈÕÆÚ          £º2004-8-10
//  879 ×îºóÐÞ¸ÄÈÕÆÚ      £º2004-8-10
//  880 -----------------------------------------------------------------------*/
//  881 static void LCD_clear(void)
//  882 {
//  883   unsigned int i;
//  884 
//  885   LCD_write_byte(0x0c, 0);
//  886   LCD_write_byte(0x80, 0);
//  887 
//  888   for (i=0; i<504; i++)
//  889     LCD_write_byte(0, 1);
//  890 }
//  891 
//  892 /*-----------------------------------------------------------------------
//  893 LCD_set_XY        : ÉèÖÃLCD×ø±êº¯Êý
//  894 
//  895 ÊäÈë²ÎÊý£ºX       £º0£­83
//  896 Y       £º0£­5
//  897 
//  898 ±àÐ´ÈÕÆÚ          £º2004-8-10
//  899 ×îºóÐÞ¸ÄÈÕÆÚ      £º2004-8-10
//  900 -----------------------------------------------------------------------*/
//  901 static void LCD_set_XY(unsigned char X, unsigned char Y)
//  902 {
//  903   LCD_write_byte(0x40 | Y, 0);	// column
//  904   LCD_write_byte(0x80 | X, 0);  // row
//  905 }
//  906 
//  907 /*-----------------------------------------------------------------------
//  908 LCD_write_char    : ÏÔÊ¾Ó¢ÎÄ×Ö·û
//  909 
//  910 ÊäÈë²ÎÊý£ºc       £ºÏÔÊ¾µÄ×Ö·û£»
//  911 
//  912 ±àÐ´ÈÕÆÚ          £º2004-8-10
//  913 ×îºóÐÞ¸ÄÈÕÆÚ      £º2004-8-10
//  914 -----------------------------------------------------------------------*/
//  915 static void LCD_write_char(unsigned char c)
//  916 {
//  917   unsigned char line;
//  918 
//  919   c -= 32;
//  920   for (line=0; line<6; line++)
//  921     LCD_write_byte(font6x8[c][line], 1);
//  922 }
//  923 
//  924 /*-----------------------------------------------------------------------
//  925 LCD_init          : 3310LCD³õÊ¼»¯
//  926 
//  927 ±àÐ´ÈÕÆÚ          £º2004-8-10
//  928 ×îºóÐÞ¸ÄÈÕÆÚ      £º2004-8-10
//  929 -----------------------------------------------------------------------*/
//  930 static void initLcd(void)
//  931 {
//  932   // CC2430 ÖÐ£¬I/O ¿Ú×öÆÕÍ¨ I/O Ê¹ÓÃÊ±ºÍÃ¿¸ö I/O ¶Ë¿ÚÏà¹ØµÄ¼Ä´æÆ÷ÓÐ 3 ¸ö£¬·Ö±ðÊÇ //PxSEL
//  933   //¹¦ÄÜÑ¡Ôñ¼Ä´æÆ÷£¬PxDIR ·½Ïò¼Ä´æÆ÷£¬PxINP ÊäÈëÄ£Ê½¼Ä´æÆ÷£¬ÆäÖÐ x Îª 0£¬1£¬2 ¡£
//  934 
//  935   P1SEL &= 0x0F; //P1¸ß4Î» ÎªÆÕÍ¨ I/O ¿Ú
//  936   P1DIR |= 0xF0; //P1¸ß4Î» ÉèÖÃÎªÊä³ö
//  937 
//  938   LCD_CE = 0;    // ¹Ø±ÕLCD
//  939   Delay_nms(1);
//  940   LCD_CE = 1;    // Ê¹ÄÜLCD
//  941   Delay_nms(1);
//  942 
//  943   LCD_write_byte(0x21, 0);	// Ê¹ÓÃÀ©Õ¹ÃüÁîÉèÖÃLCDÄ£Ê½
//  944   LCD_write_byte(0xc8, 0);	// ÉèÖÃÆ«ÖÃµçÑ¹
//  945   LCD_write_byte(0x06, 0);	// ÎÂ¶ÈÐ£Õý
//  946   LCD_write_byte(0x13, 0);	// 1:48
//  947   LCD_write_byte(0x20, 0);	// Ê¹ÓÃ»ù±¾ÃüÁî
//  948   LCD_clear();	                // ÇåÆÁ
//  949   LCD_write_byte(0x0c, 0);	// Éè¶¨ÏÔÊ¾Ä£Ê½£¬Õý³£ÏÔÊ¾
//  950   LCD_CE=0 ;                    // ¹Ø±ÕLCD
//  951 }
//  952 
//  953 
//  954 /*-----------------------------------------------------------------------
//  955 LCD_write_english_String  : Ó¢ÎÄ×Ö·û´®ÏÔÊ¾º¯Êý
//  956 
//  957 ÊäÈë²ÎÊý£º*s      £ºÓ¢ÎÄ×Ö·û´®Ö¸Õë£»
//  958 X¡¢Y    : ÏÔÊ¾×Ö·û´®µÄÎ»ÖÃ,x 0-83 ,y 0-5
//  959 
//  960 ±àÐ´ÈÕÆÚ          £º2004-8-10
//  961 ×îºóÐÞ¸ÄÈÕÆÚ      £º2004-8-10 		
//  962 -----------------------------------------------------------------------*/
//  963 static void LCD_write_english_string(unsigned char X,unsigned char Y,uint8 *s)
//  964 {
//  965   unsigned char i=0;
//  966   LCD_set_XY(0,Y);//°ÑµÚYÐÐÇåÁã
//  967   for(i=0;i<HAL_LCD_MAX_CHARS*6;i++)
//  968   {
//  969     LCD_write_byte(0,1);
//  970   }
//  971   LCD_set_XY(X,Y);
//  972   i=0;
//  973   while (*s)
//  974   {
//  975     LCD_write_char(*s);
//  976     s++;
//  977     i++;
//  978     if(i>=HAL_LCD_MAX_CHARS)return;
//  979   }
//  980 }
//  981 
//  982 /******************************************************************************
//  983 * See lcd.h for a description of this function.
//  984 ******************************************************************************/
//  985 static void lcdUpdateLine(uint8 line, uint8 *pLine) {
//  986   LCD_write_english_string(0,line,pLine);
//  987 }
//  988 
//  989 #endif
//  990 
//  991 #endif
//  992 
//  993 
//  994 /**************************************************************************************************
//  995  * @fn      HalLcdInit
//  996  *
//  997  * @brief   Initilize LCD Service
//  998  *
//  999  * @param   init - pointer to void that contains the initialized value
// 1000  *
// 1001  * @return  None
// 1002  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1003 void HalLcdInit(void)
HalLcdInit:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function HalLcdInit
// 1004 {
        FUNCALL HalLcdInit, initLcd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1005 #if (HAL_LCD == TRUE)
// 1006 
// 1007 #ifdef LCD_HW
// 1008   Lcd_Line1 = NULL;
        MOV     DPTR,#Lcd_Line1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1009   initLcd();
        ; Setup parameters for call to function initLcd
        LCALL   ??initLcd?relay
// 1010 #endif
// 1011 
// 1012 #endif /* HAL_LCD */
// 1013 
// 1014 }
        LJMP    ??Subroutine17_0 & 0xFFFF
        CFI EndBlock cfiBlock42
// 1015 
// 1016 /*************************************************************************************************
// 1017  *                    LCD EMULATION FUNCTIONS
// 1018  *
// 1019  * Some evaluation boards are equipped with Liquid Crystal Displays
// 1020  * (LCD) which may be used to display diagnostic information. These
// 1021  * functions provide LCD emulation, sending the diagnostic strings
// 1022  * to Z-Tool via the RS232 serial port. These functions are enabled
// 1023  * when the "LCD_SUPPORTED" compiler flag is placed in the makefile.
// 1024  *
// 1025  * Most applications update both lines (1 and 2) of the LCD whenever
// 1026  * text is posted to the device. This emulator assumes that line 1 is
// 1027  * updated first (saved locally) and the formatting and send operation
// 1028  * is triggered by receipt of line 2. Nothing will be transmitted if
// 1029  * only line 1 is updated.
// 1030  *
// 1031  *************************************************************************************************/
// 1032 
// 1033 
// 1034 /**************************************************************************************************
// 1035  * @fn      HalLcdWriteString
// 1036  *
// 1037  * @brief   Write a string to the LCD
// 1038  *
// 1039  * @param   str    - pointer to the string that will be displayed
// 1040  *          option - display options
// 1041  *
// 1042  * @return  None
// 1043  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1044 void HalLcdWriteString ( char *str, uint8 option)
HalLcdWriteString:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function HalLcdWriteString
// 1045 {
        FUNCALL HalLcdWriteString, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, debug_str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, LCD_write_english_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0 + 1,R1
// 1046 #if (HAL_LCD == TRUE)
// 1047 
// 1048 #ifdef LCD_SD
// 1049   byte x;
// 1050   byte bln;
// 1051   byte sln;
// 1052   char *buf;
// 1053 
// 1054   if ( Lcd_Line1 == NULL )
        MOV     DPTR,#Lcd_Line1
        MOVX    A,@DPTR
        JNZ     ??HalLcdWriteString_0
        INC     DPTR
        MOVX    A,@DPTR
??HalLcdWriteString_0:
        JNZ     ??HalLcdWriteString_1
// 1055   {
// 1056     // Set up system start-up message
// 1057     Lcd_Line1 = osal_mem_alloc( MAX_LCD_CHARS+1 );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x11
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#Lcd_Line1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1058     HalLcdWriteString( "Figure8 Wireless", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x0
        MOV     R2,#(`?<Constant "Figure8 Wireless">` & 0xff)
        MOV     R3,#((`?<Constant "Figure8 Wireless">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
// 1059   }
// 1060 
// 1061   sln = (byte)osal_strlen( str );
??HalLcdWriteString_1:
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     ?V0 + 2,A
// 1062 
// 1063   // Check boundries
// 1064   if ( sln > MAX_LCD_CHARS )
        CLR     C
        SUBB    A,#0x11
        JC      ??HalLcdWriteString_2
// 1065     sln = MAX_LCD_CHARS;
        MOV     ?V0 + 2,#0x10
// 1066 
// 1067   if ( option == HAL_LCD_LINE_1 ) {
??HalLcdWriteString_2:
        MOV     A,?V0 + 1
        JNZ     ??HalLcdWriteString_3
// 1068     // Line 1 gets saved for later
// 1069     osal_memcpy( Lcd_Line1, str, sln );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 2
        MOV     R5,#0x0
        MOV     DPTR,#Lcd_Line1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
// 1070     Lcd_Line1[sln] = '\0';
        MOV     R0,?V0 + 2
        MOV     DPTR,#Lcd_Line1
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R2
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        LJMP    ??HalLcdWriteString_4 & 0xFFFF
// 1071   }
// 1072   else {
// 1073     // Line 2 triggers action
// 1074     x = (byte)osal_strlen( (char*)Lcd_Line1 );
??HalLcdWriteString_3:
        ; Setup parameters for call to function osal_strlen
        MOV     DPTR,#Lcd_Line1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     ?V0 + 0,A
// 1075     bln = x + 1 + sln + 1;
// 1076     buf = osal_mem_alloc( bln );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,?V0 + 2
        ADD     A,?V0 + 0
        ADD     A,#0x2
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
// 1077     if ( buf != NULL ) {
        MOV     A,R6
        JNZ     ??HalLcdWriteString_5
        MOV     A,R7
??HalLcdWriteString_5:
        JZ      ??HalLcdWriteString_4
// 1078       // Concatenate strings
// 1079       osal_memcpy( buf, Lcd_Line1, x );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPTR,#Lcd_Line1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
// 1080       buf[x++] = ' ';
        MOV     ?V0 + 4,?V0 + 0
        MOV     A,R6
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine1_0 & 0xFFFF
??CrossCallReturnLabel_0:
        INC     ?V0 + 0
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 2
        MOV     R5,#0x0
        MOV     ?V0 + 4,?V0 + 0
        MOV     A,R6
        ADD     A,?V0 + 4
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
// 1081       osal_memcpy( &buf[x], str, sln );
// 1082       buf[x+sln] = '\0';
        MOV     A,?V0 + 2
        ADD     A,?V0 + 4
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
// 1083       // Send it out
// 1084 #ifdef ZTOOL_PORT
// 1085       debug_str( (byte*)buf );
        ; Setup parameters for call to function debug_str
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??debug_str?relay
// 1086 #endif
// 1087       osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
// 1088     }
// 1089   }
// 1090 #endif // LCD_SD
// 1091 
// 1092 #ifdef LCD_HW
// 1093   lcdUpdateLine( option, (byte*)str );
??HalLcdWriteString_4:
        ; Setup parameters for call to function LCD_write_english_string
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V0 + 1
        MOV     R1,#0x0
        LCALL   ??LCD_write_english_string?relay
// 1094 #endif
// 1095 
// 1096 #endif /* HAL_LCD */
// 1097 
// 1098 }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49
// 1099 
// 1100 /**************************************************************************************************
// 1101  * @fn      HalLcdWriteValue
// 1102  *
// 1103  * @brief   Write a value to the LCD
// 1104  *
// 1105  * @param   value  - value that will be displayed
// 1106  *          radix  - 8, 10, 16
// 1107  *          option - display options
// 1108  *
// 1109  * @return  None
// 1110  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1111 void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
HalLcdWriteValue:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function HalLcdWriteValue
// 1112 {
        FUNCALL HalLcdWriteValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0x27
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
// 1113 #if (HAL_LCD == TRUE)
// 1114   uint8 buf[LCD_MAX_BUF];
// 1115 
// 1116   _ltoa( value, &buf[0], radix );
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        LCALL   ??Subroutine16_1 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
// 1117   HalLcdWriteString( (char*)buf, option );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     A,R6
        MOV     R1,A
        CFI EndBlock cfiBlock50
        REQUIRE ?Subroutine20
        ; // Fall through to label ?Subroutine20
// 1118 #endif /* HAL_LCD */
// 1119 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
        MOV     A,#0x19
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock51
// 1120 
// 1121 /**************************************************************************************************
// 1122  * @fn      HalLcdWriteScreen
// 1123  *
// 1124  * @brief   Write a value to the LCD
// 1125  *
// 1126  * @param   line1  - string that will be displayed on line 1
// 1127  *          line2  - string that will be displayed on line 2
// 1128  *
// 1129  * @return  None
// 1130  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1131 void HalLcdWriteScreen( char *line1, char *line2 )
HalLcdWriteScreen:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI Function HalLcdWriteScreen
// 1132 {
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1133 #if (HAL_LCD == TRUE)
// 1134   HalLcdWriteString( line1, HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x0
        LCALL   ??HalLcdWriteString?relay
// 1135   HalLcdWriteString( line2, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??HalLcdWriteString?relay
// 1136 #endif /* HAL_LCD */
// 1137 }
        LJMP    ?Subroutine18 & 0xFFFF
        CFI EndBlock cfiBlock52
// 1138 
// 1139 /**************************************************************************************************
// 1140  * @fn      HalLcdWriteStringValue
// 1141  *
// 1142  * @brief   Write a string followed by a value to the LCD
// 1143  *
// 1144  * @param   title  -
// 1145  *          value  -
// 1146  *          format -
// 1147  *          line   -
// 1148  *
// 1149  * @return  None
// 1150  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1151 void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
HalLcdWriteStringValue:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function HalLcdWriteStringValue
// 1152 {
        FUNCALL HalLcdWriteStringValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 3,R1
        MOV     A,#0x27
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
// 1153 #if (HAL_LCD == TRUE)
// 1154   uint8 tmpLen;
// 1155   uint8 buf[LCD_MAX_BUF];
// 1156   uint32 err;
// 1157 
// 1158   tmpLen = (uint8)osal_strlen( (char*)title );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
// 1159   osal_memcpy( buf, title, tmpLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,R2
        MOV     ?V0 + 0,A
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
// 1160   buf[tmpLen] = ' ';
        LCALL   ?Subroutine1 & 0xFFFF
// 1161   err = (uint32)(value);
// 1162   _ltoa( err, &buf[tmpLen+1], format );
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function _ltoa
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
// 1163   HalLcdWriteString( (char*)buf, line );		
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,?V0 + 5
        LJMP    ?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock53
// 1164 #endif /* HAL_LCD */
// 1165 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 17)
??Subroutine1_0:
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x20
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
        CFI EndBlock cfiCond58
// 1166 
// 1167 /**************************************************************************************************
// 1168  * @fn      HalLcdWriteStringValue
// 1169  *
// 1170  * @brief   Write a string followed by a value to the LCD
// 1171  *
// 1172  * @param   title   -
// 1173  *          value1  -
// 1174  *          format1 -
// 1175  *          value2  -
// 1176  *          format2 -
// 1177  *          line    -
// 1178  *
// 1179  * @return  None
// 1180  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1181 void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
HalLcdWriteStringValueValue:
        CFI Block cfiBlock59 Using cfiCommon0
        CFI Function HalLcdWriteStringValueValue
// 1182                                   uint16 value2, byte format2, uint8 line )
// 1183 {
        FUNCALL HalLcdWriteStringValueValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 3,R1
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
// 1184 #if (HAL_LCD == TRUE)
// 1185   uint8 tmpLen;
// 1186   uint8 buf[LCD_MAX_BUF];
// 1187   uint32 err;
// 1188 
// 1189   tmpLen = (uint8)osal_strlen( (char*)title );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 4,A
// 1190   if ( tmpLen )
        JZ      ??HalLcdWriteStringValueValue_0
// 1191   {
// 1192     osal_memcpy( buf, title, tmpLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        MOV     ?V0 + 0,A
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
// 1193     buf[tmpLen++] = ' ';
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        INC     ?V0 + 4
// 1194   }
// 1195 
// 1196   err = (uint32)(value1);
// 1197   _ltoa( err, &buf[tmpLen], format1 );
??HalLcdWriteStringValueValue_0:
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 4
        MOV     ?V0 + 0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
// 1198   tmpLen = (uint8)osal_strlen( (char*)buf );
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 4,A
// 1199 
// 1200   buf[tmpLen++] = ',';
        MOV     ?V0 + 0,A
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,#0x2c
        MOVX    @DPTR,A
        INC     ?V0 + 4
// 1201   buf[tmpLen++] = ' ';
        MOV     ?V0 + 0,?V0 + 4
        LCALL   ?Subroutine1 & 0xFFFF
// 1202   err = (uint32)(value2);
// 1203   _ltoa( err, &buf[tmpLen], format2 );
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function _ltoa
        MOV     A,#0x1
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
// 1204 
// 1205   HalLcdWriteString( (char *)buf, line );		
        ; Setup parameters for call to function HalLcdWriteString
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
// 1206 #endif /* HAL_LCD */
// 1207 }
        MOV     A,#0x19
        LJMP    ?Subroutine19 & 0xFFFF
        CFI EndBlock cfiBlock59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 20)
??Subroutine15_0:
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 34)
??Subroutine9_0:
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69
        CFI EndBlock cfiCond70
// 1208 
// 1209 /**************************************************************************************************
// 1210  * @fn      HalLcdDisplayPercentBar
// 1211  *
// 1212  * @brief   Display percentage bar on the LCD
// 1213  *
// 1214  * @param   title   -
// 1215  *          value   -
// 1216  *
// 1217  * @return  None
// 1218  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1219 void HalLcdDisplayPercentBar( char *title, uint8 value )
HalLcdDisplayPercentBar:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI Function HalLcdDisplayPercentBar
// 1220 {
        FUNCALL HalLcdDisplayPercentBar, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdDisplayPercentBar, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdDisplayPercentBar, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdDisplayPercentBar, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        MOV     R6,A
// 1221 #if (HAL_LCD == TRUE)
// 1222   uint8 percent;
// 1223   uint8 leftOver;
// 1224   uint8 buf[HAL_LCD_MAX_CHARS+1];
// 1225   uint32 err;
// 1226   uint8 x;
// 1227 
// 1228   /* Write the title: */
// 1229   HalLcdWriteString( title, HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x0
        LCALL   ??HalLcdWriteString?relay
// 1230 
// 1231   if ( value > 100 )
        MOV     A,R6
        CLR     C
        SUBB    A,#0x65
        JC      ??HalLcdDisplayPercentBar_0
// 1232     value = 100;
        MOV     R6,#0x64
// 1233 
// 1234   /* convert to blocks */
// 1235   percent = (byte)(value / 10);
??HalLcdDisplayPercentBar_0:
        MOV     B,#0xa
        MOV     A,R6
        DIV     AB
        MOV     ?V0 + 3,A
// 1236   leftOver = (byte)(value % 10);
        MOV     A,R6
        MOV     B,#0xa
        DIV     AB
        MOV     R7,B
// 1237 
// 1238   /* Make window */
// 1239   osal_memcpy( buf, "[          ]  ", 15 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(`?<Constant "[          ]  ">` & 0xff)
        MOV     ?V0 + 1,#((`?<Constant "[          ]  ">` >> 8) & 0xff)
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0xf
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1240 
// 1241   for ( x = 0; x < percent; x ++ )
        SJMP    ??HalLcdDisplayPercentBar_1
// 1242   {
// 1243     buf[1+x] = '>';
??HalLcdDisplayPercentBar_2:
        MOV     ?V0 + 0,?V0 + 2
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_20:
        INC     DPTR
        MOV     A,#0x3e
        MOVX    @DPTR,A
// 1244   }
        INC     ?V0 + 2
??HalLcdDisplayPercentBar_1:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 3
        JC      ??HalLcdDisplayPercentBar_2
// 1245 
// 1246   if ( leftOver >= 5 )
        MOV     A,R7
        CLR     C
        SUBB    A,#0x5
        JC      ??HalLcdDisplayPercentBar_3
// 1247     buf[1+x] = '+';
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        MOV     A,#0x2b
        MOVX    @DPTR,A
// 1248 
// 1249   err = (uint32)value;
// 1250   _ltoa( err, (uint8*)&buf[13], 10 );
??HalLcdDisplayPercentBar_3:
        ; Setup parameters for call to function _ltoa
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R1,#0xa
        MOV     A,R6
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1251 
// 1252   HalLcdWriteString( (char*)buf, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
// 1253 #endif /* HAL_LCD */
// 1254 }
        MOV     A,#0x15
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOV     R1,?V0 + 3
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 35)
??Subroutine16_0:
        MOV     R4,#0x0
        MOV     R5,#0x0
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 41)
??Subroutine16_1:
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for <Constant "Figure8 Wireless"`:
        DB "Figure8 Wireless"

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for <Constant "[          ]  ">>`:
        DB "[          ]  "

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OutData_164?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OutData_164

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DatWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DatWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ComWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ComWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initLcd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initLcd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_write_english_string?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_write_english_string

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteString?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteScreen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteScreen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValueValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValueValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdDisplayPercentBar?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdDisplayPercentBar

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
`?<Constant "Figure8 Wireless">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "Figure8 Wireless"`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
`?<Constant "[          ]  ">`:
        DS 15
        REQUIRE `?<Initializer for <Constant "[          ]  ">>`
        REQUIRE __INIT_XDATA_I

        END
// 1255 
// 1256 
// 1257 /**************************************************************************************************
// 1258 **************************************************************************************************/
// 1259 
// 
// 1 684 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
// 1 568 bytes in segment CODE_C
//     3 bytes in segment SFR_AN
//    32 bytes in segment XDATA_I
//    32 bytes in segment XDATA_ID
//     2 bytes in segment XDATA_Z
// 
// 3 362 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
//    34 bytes of XDATA memory
//
//Errors: none
//Warnings: 3
